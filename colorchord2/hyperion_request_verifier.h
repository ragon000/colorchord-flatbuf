#ifndef HYPERION_REQUEST_VERIFIER_H
#define HYPERION_REQUEST_VERIFIER_H

/* Generated by flatcc 0.6.1-dev FlatBuffers schema compiler for C by dvide.com */

#ifndef HYPERION_REQUEST_READER_H
#include "hyperion_request_reader.h"
#endif
#include "flatcc/flatcc_verifier.h"
#include "flatcc/flatcc_prologue.h"

static int hyperionnet_Register_verify_table(flatcc_table_verifier_descriptor_t *td);
static int hyperionnet_RawImage_verify_table(flatcc_table_verifier_descriptor_t *td);
static int hyperionnet_Image_verify_table(flatcc_table_verifier_descriptor_t *td);
static int hyperionnet_Clear_verify_table(flatcc_table_verifier_descriptor_t *td);
static int hyperionnet_Color_verify_table(flatcc_table_verifier_descriptor_t *td);
static int hyperionnet_Request_verify_table(flatcc_table_verifier_descriptor_t *td);

static int hyperionnet_ImageType_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, hyperionnet_RawImage_verify_table); /* RawImage */
    default: return flatcc_verify_ok;
    }
}

static int hyperionnet_Command_union_verifier(flatcc_union_verifier_descriptor_t *ud)
{
    switch (ud->type) {
    case 1: return flatcc_verify_union_table(ud, hyperionnet_Color_verify_table); /* Color */
    case 2: return flatcc_verify_union_table(ud, hyperionnet_Image_verify_table); /* Image */
    case 3: return flatcc_verify_union_table(ud, hyperionnet_Clear_verify_table); /* Clear */
    case 4: return flatcc_verify_union_table(ud, hyperionnet_Register_verify_table); /* Register */
    default: return flatcc_verify_ok;
    }
}

static int hyperionnet_Register_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_string_field(td, 0, 1) /* origin */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* priority */)) return ret;
    return flatcc_verify_ok;
}

static inline int hyperionnet_Register_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Register_identifier, &hyperionnet_Register_verify_table);
}

static inline int hyperionnet_Register_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Register_type_identifier, &hyperionnet_Register_verify_table);
}

static inline int hyperionnet_Register_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &hyperionnet_Register_verify_table);
}

static inline int hyperionnet_Register_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &hyperionnet_Register_verify_table);
}

static int hyperionnet_RawImage_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_vector_field(td, 0, 0, 1, 1, INT64_C(4294967295)) /* data */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* width */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* height */)) return ret;
    return flatcc_verify_ok;
}

static inline int hyperionnet_RawImage_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_RawImage_identifier, &hyperionnet_RawImage_verify_table);
}

static inline int hyperionnet_RawImage_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_RawImage_type_identifier, &hyperionnet_RawImage_verify_table);
}

static inline int hyperionnet_RawImage_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &hyperionnet_RawImage_verify_table);
}

static inline int hyperionnet_RawImage_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &hyperionnet_RawImage_verify_table);
}

static int hyperionnet_Image_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 1, &hyperionnet_ImageType_union_verifier) /* data */)) return ret;
    if ((ret = flatcc_verify_field(td, 2, 4, 4) /* duration */)) return ret;
    return flatcc_verify_ok;
}

static inline int hyperionnet_Image_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Image_identifier, &hyperionnet_Image_verify_table);
}

static inline int hyperionnet_Image_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Image_type_identifier, &hyperionnet_Image_verify_table);
}

static inline int hyperionnet_Image_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &hyperionnet_Image_verify_table);
}

static inline int hyperionnet_Image_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &hyperionnet_Image_verify_table);
}

static int hyperionnet_Clear_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* priority */)) return ret;
    return flatcc_verify_ok;
}

static inline int hyperionnet_Clear_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Clear_identifier, &hyperionnet_Clear_verify_table);
}

static inline int hyperionnet_Clear_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Clear_type_identifier, &hyperionnet_Clear_verify_table);
}

static inline int hyperionnet_Clear_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &hyperionnet_Clear_verify_table);
}

static inline int hyperionnet_Clear_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &hyperionnet_Clear_verify_table);
}

static int hyperionnet_Color_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_field(td, 0, 4, 4) /* data */)) return ret;
    if ((ret = flatcc_verify_field(td, 1, 4, 4) /* duration */)) return ret;
    return flatcc_verify_ok;
}

static inline int hyperionnet_Color_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Color_identifier, &hyperionnet_Color_verify_table);
}

static inline int hyperionnet_Color_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Color_type_identifier, &hyperionnet_Color_verify_table);
}

static inline int hyperionnet_Color_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &hyperionnet_Color_verify_table);
}

static inline int hyperionnet_Color_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &hyperionnet_Color_verify_table);
}

static int hyperionnet_Request_verify_table(flatcc_table_verifier_descriptor_t *td)
{
    int ret;
    if ((ret = flatcc_verify_union_field(td, 1, 1, &hyperionnet_Command_union_verifier) /* command */)) return ret;
    return flatcc_verify_ok;
}

static inline int hyperionnet_Request_verify_as_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Request_identifier, &hyperionnet_Request_verify_table);
}

static inline int hyperionnet_Request_verify_as_typed_root(const void *buf, size_t bufsiz)
{
    return flatcc_verify_table_as_root(buf, bufsiz, hyperionnet_Request_type_identifier, &hyperionnet_Request_verify_table);
}

static inline int hyperionnet_Request_verify_as_root_with_identifier(const void *buf, size_t bufsiz, const char *fid)
{
    return flatcc_verify_table_as_root(buf, bufsiz, fid, &hyperionnet_Request_verify_table);
}

static inline int hyperionnet_Request_verify_as_root_with_type_hash(const void *buf, size_t bufsiz, flatbuffers_thash_t thash)
{
    return flatcc_verify_table_as_typed_root(buf, bufsiz, thash, &hyperionnet_Request_verify_table);
}

#include "flatcc/flatcc_epilogue.h"
#endif /* HYPERION_REQUEST_VERIFIER_H */
